<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="

	http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
>

    <!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
    <!--<bean id="springContextHolder" class="com.nbb.common.SpringContextHolder" />-->

    <mvc:default-servlet-handler/>
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean id="jackson2HttpMessageConverter"
                  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <context:component-scan base-package="com.dk.controller"/>

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--<property name="prefix" value="/views/"></property>-->
        <!--<property name="suffix" value=".jsp"></property>-->
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"></property>
    </bean>

    <!-- JSON转换器 -->
   <!-- <bean id="jsonConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json; charset=UTF-8</value>

            </list>
        </property>
    </bean>-->

    <!--拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.dk.interceptor.SecurityInterceptor">
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- spring mvc 中的controller只能在本配置文件中配置 -->
    <aop:aspectj-autoproxy/>

    <bean id="controllerLogger" class="com.dk.controller.ControllerLogger"></bean>

    <aop:config>
        <!-- 切入点 -->
        <aop:pointcut
                expression="execution(* com.dk.controller..*.*(..))"
                id="myPointcut"/>
        <!-- 切面： 将哪个对象中的哪个方法，织入到哪个切入点 -->
        <aop:aspect id="dd" ref="controllerLogger">
            <!-- 前置通知 -->
            <aop:before method="before" pointcut-ref="myPointcut"/>
            <aop:after method="after" pointcut-ref="myPointcut"/>
            <aop:around method="around" pointcut-ref="myPointcut"/>
            <!-- <aop:after-throwing method="throwing" pointcut-ref="myPointcut" />  -->
            <!--
            <aop:after-returning method="logArgAndReturn" returning="returnObj" pointcut-ref="myPointcut"/>
            -->
        </aop:aspect>
    </aop:config>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="100485760"/>
    </bean>
<!--        quarz定时任务判断视频权重-->
        <!-- 要调用的工作类 -->
        <bean id="quartzJob" class="com.dk.service.impl.QuarzWeight"></bean>
        <!-- 定义调用对象和调用对象的方法 -->
        <bean id="jobtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
            <!-- 调用的类 -->
            <property name="targetObject">
                <ref bean="quartzJob"/>
            </property>
            <!-- 调用类中的方法 -->
            <property name="targetMethod">
                <value>setWeight</value>
            </property>
        </bean>
        <!-- 定义触发时间 -->
        <bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
            <property name="jobDetail">
                <ref bean="jobtask"/>
            </property>
            <!-- cron表达式 -->
            <property name="cronExpression">
                <value>0 0 * * * ?</value>
            </property>
        </bean>

    <!-- 要调用的工作类,统计当天数据到统计表中-->
        <bean id="quartzJobData" class="com.dk.service.impl.QuarzUpdateData"></bean>
        <!-- 定义调用对象和调用对象的方法 -->
        <bean id="jobtaskData" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
            <!-- 调用的类 -->
            <property name="targetObject">
                <ref bean="quartzJobData"/>
            </property>
            <!-- 调用类中的方法 -->
            <property name="targetMethod">
                <value>updateTodayData</value>
            </property>
        </bean>
        <!-- 定义触发时间 -->
        <bean id="doTimeData" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
            <property name="jobDetail">
                <ref bean="jobtaskData"/>
            </property>
            <!-- cron表达式 -->
            <property name="cronExpression">
                <value>0 0/30 * * * ?</value>
            </property>
        </bean>
    <!-- 配置项目启动后任务就执行一次 -->
    <bean id="rsh_simpleTrigger1" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="jobtask" />
        <property name="startDelay" value="500" />
        <property name="repeatInterval" value="0" />
        <property name="repeatCount" value="0" />
    </bean>
    <bean id="rsh_simpleTrigger2" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="jobtaskData" />
        <property name="startDelay" value="500" />
        <property name="repeatInterval" value="0" />
        <property name="repeatCount" value="0" />
    </bean>
    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
        <bean id="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
            <property name="triggers">
                <list>
                    <ref bean="doTime"/>
                    <ref bean="doTimeData"/>
                    <ref bean="rsh_simpleTrigger1" />
                    <ref bean="rsh_simpleTrigger2" />
                </list>
            </property>
        </bean>




</beans>